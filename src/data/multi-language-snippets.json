{
  "java": [
    {
      "id": "java-add-numbers",
      "title": "Add Two Numbers",
      "difficulty": "beginner",
      "category": "basics",
      "language": "java",
      "description": "Simple function to add two numbers",
      "code": "public int add(int a, int b) {\n    return a + b;\n}"
    },
    {
      "id": "java-hello-world",
      "title": "Hello World",
      "difficulty": "beginner", 
      "category": "basics",
      "language": "java",
      "description": "Classic hello world program",
      "code": "public static void main(String[] args) {\n    System.out.println(\"Hello, World!\");\n}"
    },
    {
      "id": "java-max-two",
      "title": "Find Maximum of Two",
      "difficulty": "beginner",
      "category": "basics", 
      "language": "java",
      "description": "Find the maximum of two numbers",
      "code": "public int max(int a, int b) {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}"
    },
    {
      "id": "java-is-even",
      "title": "Check Even Number",
      "difficulty": "beginner",
      "category": "basics",
      "language": "java", 
      "description": "Check if a number is even",
      "code": "public boolean isEven(int num) {\n    return num % 2 == 0;\n}"
    },
    {
      "id": "java-multiply",
      "title": "Multiply Two Numbers",
      "difficulty": "beginner",
      "category": "basics",
      "language": "java",
      "description": "Simple multiplication function",
      "code": "public int multiply(int a, int b) {\n    return a * b;\n}"
    },
    {
      "id": "java-absolute",
      "title": "Absolute Value",
      "difficulty": "beginner",
      "category": "basics",
      "language": "java",
      "description": "Get absolute value of a number",
      "code": "public int abs(int num) {\n    if (num < 0) {\n        return -num;\n    }\n    return num;\n}"
    },
    {
      "id": "java-binary-search",
      "title": "Binary Search",
      "difficulty": "easy",
      "category": "searching",
      "language": "java",
      "description": "Classic binary search algorithm for sorted arrays",
      "code": "public int binarySearch(int[] arr, int target) {\n    int left = 0;\n    int right = arr.length - 1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if (arr[mid] == target) {\n            return mid;\n        } else if (arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return -1;\n}"
    },
    {
      "id": "java-bubble-sort",
      "title": "Bubble Sort",
      "difficulty": "easy",
      "category": "sorting",
      "language": "java",
      "description": "Simple bubble sort implementation",
      "code": "public void bubbleSort(int[] arr) {\n    int n = arr.length;\n    \n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}"
    },
    {
      "id": "java-two-sum",
      "title": "Two Sum",
      "difficulty": "easy",
      "category": "arrays",
      "language": "java",
      "description": "Find two numbers that add up to target",
      "code": "public int[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    \n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        \n        if (map.containsKey(complement)) {\n            return new int[]{map.get(complement), i};\n        }\n        \n        map.put(nums[i], i);\n    }\n    \n    return new int[]{};\n}"
    },
    {
      "id": "java-fibonacci",
      "title": "Fibonacci (Recursive)",
      "difficulty": "easy",
      "category": "recursion",
      "language": "java",
      "description": "Classic recursive fibonacci implementation",
      "code": "public int fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    \n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\npublic void printFibonacci(int count) {\n    for (int i = 0; i < count; i++) {\n        System.out.print(fibonacci(i) + \" \");\n    }\n}"
    }
  ],
  "python": [
    {
      "id": "python-add-numbers",
      "title": "Add Two Numbers",
      "difficulty": "beginner",
      "category": "basics",
      "language": "python",
      "description": "Simple function to add two numbers",
      "code": "def add(a, b):\n    return a + b"
    },
    {
      "id": "python-hello-world",
      "title": "Hello World",
      "difficulty": "beginner",
      "category": "basics", 
      "language": "python",
      "description": "Classic hello world program",
      "code": "print(\"Hello, World!\")"
    },
    {
      "id": "python-max-two",
      "title": "Find Maximum of Two",
      "difficulty": "beginner",
      "category": "basics",
      "language": "python", 
      "description": "Find the maximum of two numbers",
      "code": "def max_two(a, b):\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
      "id": "python-is-even",
      "title": "Check Even Number", 
      "difficulty": "beginner",
      "category": "basics",
      "language": "python",
      "description": "Check if a number is even",
      "code": "def is_even(num):\n    return num % 2 == 0"
    },
    {
      "id": "python-multiply",
      "title": "Multiply Two Numbers",
      "difficulty": "beginner",
      "category": "basics",
      "language": "python",
      "description": "Simple multiplication function",
      "code": "def multiply(a, b):\n    return a * b"
    },
    {
      "id": "python-absolute",
      "title": "Absolute Value",
      "difficulty": "beginner",
      "category": "basics",
      "language": "python",
      "description": "Get absolute value of a number",
      "code": "def abs_value(num):\n    if num < 0:\n        return -num\n    return num"
    },
    {
      "id": "python-binary-search",
      "title": "Binary Search",
      "difficulty": "easy",
      "category": "searching",
      "language": "python",
      "description": "Classic binary search algorithm for sorted arrays",
      "code": "def binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
      "id": "python-bubble-sort",
      "title": "Bubble Sort",
      "difficulty": "easy",
      "category": "sorting",
      "language": "python",
      "description": "Simple bubble sort implementation",
      "code": "def bubble_sort(arr):\n    n = len(arr)\n    \n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    \n    return arr"
    },
    {
      "id": "python-two-sum",
      "title": "Two Sum",
      "difficulty": "easy",
      "category": "arrays",
      "language": "python",
      "description": "Find two numbers that add up to target",
      "code": "def two_sum(nums, target):\n    num_map = {}\n    \n    for i, num in enumerate(nums):\n        complement = target - num\n        \n        if complement in num_map:\n            return [num_map[complement], i]\n        \n        num_map[num] = i\n    \n    return []"
    },
    {
      "id": "python-fibonacci",
      "title": "Fibonacci (Recursive)",
      "difficulty": "easy",
      "category": "recursion",
      "language": "python",
      "description": "Classic recursive fibonacci implementation",
      "code": "def fibonacci(n):\n    if n <= 1:\n        return n\n    \n    return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef print_fibonacci(count):\n    for i in range(count):\n        print(fibonacci(i), end=\" \")\n    print()"
    },
    {
      "id": "python-quick-sort",
      "title": "Quick Sort",
      "difficulty": "medium",
      "category": "sorting",
      "language": "python",
      "description": "Efficient divide-and-conquer sorting algorithm",
      "code": "def quick_sort(arr, low=0, high=None):\n    if high is None:\n        high = len(arr) - 1\n    \n    if low < high:\n        pi = partition(arr, low, high)\n        \n        quick_sort(arr, low, pi - 1)\n        quick_sort(arr, pi + 1, high)\n    \n    return arr\n\ndef partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    \n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    \n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\n    return i + 1"
    }
  ],
  "cpp": [
    {
      "id": "cpp-add-numbers",
      "title": "Add Two Numbers",
      "difficulty": "beginner",
      "category": "basics",
      "language": "cpp",
      "description": "Simple function to add two numbers",
      "code": "int add(int a, int b) {\n    return a + b;\n}"
    },
    {
      "id": "cpp-hello-world",
      "title": "Hello World",
      "difficulty": "beginner",
      "category": "basics",
      "language": "cpp",
      "description": "Classic hello world program",
      "code": "#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << \"Hello, World!\" << endl;\n    return 0;\n}"
    },
    {
      "id": "cpp-max-two", 
      "title": "Find Maximum of Two",
      "difficulty": "beginner",
      "category": "basics",
      "language": "cpp",
      "description": "Find the maximum of two numbers",
      "code": "int max(int a, int b) {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}"
    },
    {
      "id": "cpp-is-even",
      "title": "Check Even Number",
      "difficulty": "beginner", 
      "category": "basics",
      "language": "cpp",
      "description": "Check if a number is even",
      "code": "bool isEven(int num) {\n    return num % 2 == 0;\n}"
    },
    {
      "id": "cpp-multiply",
      "title": "Multiply Two Numbers",
      "difficulty": "beginner",
      "category": "basics",
      "language": "cpp",
      "description": "Simple multiplication function",
      "code": "int multiply(int a, int b) {\n    return a * b;\n}"
    },
    {
      "id": "cpp-absolute",
      "title": "Absolute Value",
      "difficulty": "beginner",
      "category": "basics",
      "language": "cpp",
      "description": "Get absolute value of a number",
      "code": "int abs(int num) {\n    if (num < 0) {\n        return -num;\n    }\n    return num;\n}"
    },
    {
      "id": "cpp-binary-search",
      "title": "Binary Search",
      "difficulty": "easy",
      "category": "searching",
      "language": "cpp",
      "description": "Classic binary search algorithm for sorted arrays",
      "code": "#include <vector>\nusing namespace std;\n\nint binarySearch(vector<int>& arr, int target) {\n    int left = 0;\n    int right = arr.size() - 1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if (arr[mid] == target) {\n            return mid;\n        } else if (arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return -1;\n}"
    },
    {
      "id": "cpp-bubble-sort",
      "title": "Bubble Sort",
      "difficulty": "easy",
      "category": "sorting",
      "language": "cpp",
      "description": "Simple bubble sort implementation",
      "code": "#include <vector>\nusing namespace std;\n\nvoid bubbleSort(vector<int>& arr) {\n    int n = arr.size();\n    \n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                swap(arr[j], arr[j + 1]);\n            }\n        }\n    }\n}"
    },
    {
      "id": "cpp-two-sum",
      "title": "Two Sum",
      "difficulty": "easy",
      "category": "arrays",
      "language": "cpp",
      "description": "Find two numbers that add up to target",
      "code": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> numMap;\n    \n    for (int i = 0; i < nums.size(); i++) {\n        int complement = target - nums[i];\n        \n        if (numMap.find(complement) != numMap.end()) {\n            return {numMap[complement], i};\n        }\n        \n        numMap[nums[i]] = i;\n    }\n    \n    return {};\n}"
    },
    {
      "id": "cpp-fibonacci",
      "title": "Fibonacci (Recursive)",
      "difficulty": "easy",
      "category": "recursion",
      "language": "cpp",
      "description": "Classic recursive fibonacci implementation",
      "code": "#include <iostream>\nusing namespace std;\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    \n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nvoid printFibonacci(int count) {\n    for (int i = 0; i < count; i++) {\n        cout << fibonacci(i) << \" \";\n    }\n    cout << endl;\n}"
    },
    {
      "id": "cpp-reverse-linked-list",
      "title": "Reverse Linked List",
      "difficulty": "medium",
      "category": "linked-lists",
      "language": "cpp",
      "description": "Reverse a singly linked list iteratively",
      "code": "struct ListNode {\n    int val;\n    ListNode* next;\n    \n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode* next) : val(x), next(next) {}\n};\n\nListNode* reverseList(ListNode* head) {\n    ListNode* prev = nullptr;\n    ListNode* current = head;\n    \n    while (current != nullptr) {\n        ListNode* next = current->next;\n        current->next = prev;\n        prev = current;\n        current = next;\n    }\n    \n    return prev;\n}"
    }
  ],
  "javascript": [
    {
      "id": "js-add-numbers",
      "title": "Add Two Numbers",
      "difficulty": "beginner",
      "category": "basics",
      "language": "javascript",
      "description": "Simple function to add two numbers",
      "code": "function add(a, b) {\n    return a + b;\n}"
    },
    {
      "id": "js-hello-world",
      "title": "Hello World",
      "difficulty": "beginner",
      "category": "basics",
      "language": "javascript", 
      "description": "Classic hello world program",
      "code": "console.log(\"Hello, World!\");"
    },
    {
      "id": "js-max-two",
      "title": "Find Maximum of Two",
      "difficulty": "beginner",
      "category": "basics",
      "language": "javascript",
      "description": "Find the maximum of two numbers",
      "code": "function max(a, b) {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}"
    },
    {
      "id": "js-is-even",
      "title": "Check Even Number",
      "difficulty": "beginner",
      "category": "basics", 
      "language": "javascript",
      "description": "Check if a number is even",
      "code": "function isEven(num) {\n    return num % 2 === 0;\n}"
    },
    {
      "id": "js-multiply",
      "title": "Multiply Two Numbers",
      "difficulty": "beginner",
      "category": "basics",
      "language": "javascript",
      "description": "Simple multiplication function",
      "code": "function multiply(a, b) {\n    return a * b;\n}"
    },
    {
      "id": "js-absolute",
      "title": "Absolute Value",
      "difficulty": "beginner",
      "category": "basics",
      "language": "javascript",
      "description": "Get absolute value of a number",
      "code": "function abs(num) {\n    if (num < 0) {\n        return -num;\n    }\n    return num;\n}"
    },
    {
      "id": "js-binary-search",
      "title": "Binary Search",
      "difficulty": "easy",
      "category": "searching",
      "language": "javascript",
      "description": "Classic binary search algorithm for sorted arrays",
      "code": "function binarySearch(arr, target) {\n    let left = 0;\n    let right = arr.length - 1;\n    \n    while (left <= right) {\n        const mid = Math.floor(left + (right - left) / 2);\n        \n        if (arr[mid] === target) {\n            return mid;\n        } else if (arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return -1;\n}"
    },
    {
      "id": "js-bubble-sort",
      "title": "Bubble Sort",
      "difficulty": "easy",
      "category": "sorting",
      "language": "javascript",
      "description": "Simple bubble sort implementation",
      "code": "function bubbleSort(arr) {\n    const n = arr.length;\n    \n    for (let i = 0; i < n - 1; i++) {\n        for (let j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            }\n        }\n    }\n    \n    return arr;\n}"
    },
    {
      "id": "js-two-sum",
      "title": "Two Sum",
      "difficulty": "easy",
      "category": "arrays",
      "language": "javascript",
      "description": "Find two numbers that add up to target",
      "code": "function twoSum(nums, target) {\n    const numMap = new Map();\n    \n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        \n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        \n        numMap.set(nums[i], i);\n    }\n    \n    return [];\n}"
    },
    {
      "id": "js-fibonacci",
      "title": "Fibonacci (Recursive)",
      "difficulty": "easy",
      "category": "recursion",
      "language": "javascript",
      "description": "Classic recursive fibonacci implementation",
      "code": "function fibonacci(n) {\n    if (n <= 1) {\n        return n;\n    }\n    \n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nfunction printFibonacci(count) {\n    const result = [];\n    for (let i = 0; i < count; i++) {\n        result.push(fibonacci(i));\n    }\n    console.log(result.join(' '));\n}"
    },
    {
      "id": "js-quick-sort",
      "title": "Quick Sort",
      "difficulty": "medium",
      "category": "sorting",
      "language": "javascript",
      "description": "Efficient divide-and-conquer sorting algorithm",
      "code": "function quickSort(arr, low = 0, high = arr.length - 1) {\n    if (low < high) {\n        const pi = partition(arr, low, high);\n        \n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n    \n    return arr;\n}\n\nfunction partition(arr, low, high) {\n    const pivot = arr[high];\n    let i = low - 1;\n    \n    for (let j = low; j < high; j++) {\n        if (arr[j] < pivot) {\n            i++;\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n        }\n    }\n    \n    [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n    return i + 1;\n}"
    },
    {
      "id": "js-valid-parentheses",
      "title": "Valid Parentheses",
      "difficulty": "easy",
      "category": "strings",
      "language": "javascript",
      "description": "Check if parentheses are properly balanced",
      "code": "function isValid(s) {\n    const stack = [];\n    const pairs = {\n        ')': '(',\n        ']': '[',\n        '}': '{'\n    };\n    \n    for (const char of s) {\n        if (char === '(' || char === '[' || char === '{') {\n            stack.push(char);\n        } else {\n            if (stack.length === 0) {\n                return false;\n            }\n            \n            const top = stack.pop();\n            if (pairs[char] !== top) {\n                return false;\n            }\n        }\n    }\n    \n    return stack.length === 0;\n}"
    }
  ]
}
